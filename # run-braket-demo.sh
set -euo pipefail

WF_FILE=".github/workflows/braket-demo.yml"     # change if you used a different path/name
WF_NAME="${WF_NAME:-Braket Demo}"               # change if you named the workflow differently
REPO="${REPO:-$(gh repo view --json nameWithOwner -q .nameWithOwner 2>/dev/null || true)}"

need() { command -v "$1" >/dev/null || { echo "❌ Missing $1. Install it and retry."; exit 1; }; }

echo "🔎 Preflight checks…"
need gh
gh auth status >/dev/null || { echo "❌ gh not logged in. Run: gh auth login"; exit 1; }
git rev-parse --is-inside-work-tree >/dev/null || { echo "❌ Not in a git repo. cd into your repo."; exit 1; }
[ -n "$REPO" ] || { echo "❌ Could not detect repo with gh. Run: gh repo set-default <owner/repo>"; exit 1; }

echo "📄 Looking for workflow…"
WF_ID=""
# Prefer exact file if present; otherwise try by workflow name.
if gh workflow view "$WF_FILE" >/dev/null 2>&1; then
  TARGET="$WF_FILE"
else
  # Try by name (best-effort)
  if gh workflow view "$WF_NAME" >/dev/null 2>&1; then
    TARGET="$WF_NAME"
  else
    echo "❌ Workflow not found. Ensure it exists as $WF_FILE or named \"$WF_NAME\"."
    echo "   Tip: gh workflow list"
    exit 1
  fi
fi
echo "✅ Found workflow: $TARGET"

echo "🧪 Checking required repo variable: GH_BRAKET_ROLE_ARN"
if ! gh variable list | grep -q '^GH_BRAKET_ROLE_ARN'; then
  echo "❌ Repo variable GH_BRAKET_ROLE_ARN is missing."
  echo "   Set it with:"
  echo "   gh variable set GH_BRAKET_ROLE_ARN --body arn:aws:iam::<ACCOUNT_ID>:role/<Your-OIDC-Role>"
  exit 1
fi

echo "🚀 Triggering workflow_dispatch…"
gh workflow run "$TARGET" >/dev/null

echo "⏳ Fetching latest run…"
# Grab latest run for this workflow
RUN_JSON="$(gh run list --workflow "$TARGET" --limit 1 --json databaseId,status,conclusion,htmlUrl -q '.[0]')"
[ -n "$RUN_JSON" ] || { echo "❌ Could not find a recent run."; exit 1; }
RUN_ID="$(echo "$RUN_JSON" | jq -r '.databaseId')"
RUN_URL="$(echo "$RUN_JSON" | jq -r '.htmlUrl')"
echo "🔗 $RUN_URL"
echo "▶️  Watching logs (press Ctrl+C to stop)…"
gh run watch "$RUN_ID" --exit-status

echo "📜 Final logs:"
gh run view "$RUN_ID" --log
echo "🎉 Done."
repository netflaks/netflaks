# run-braket-demo.sh
set -euo pipefail

WF_FILE=".github/workflows/braket-demo.yml"     # change if you used a different path/name
WF_NAME="${WF_NAME:-Braket Demo}"               # change if you named the workflow differently
REPO="${REPO:-$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null || true)}"

need() { command -v "$1" >/dev/null || { echo "‚ùå Missing $1. Install it and retry."; exit 1; }; }

echo "üîé Preflight checks‚Ä¶"
need gh
gh auth status >/dev/null || { echo "‚ùå gh not logged in. Run: gh auth login"; exit 1; }
git rev-parse --is-inside-work-tree >/dev/null || { echo "‚ùå Not in a git repo. cd into your repo."; exit 1; }
[ -n "$REPO" ] || { echo "‚ùå Could not detect repo with gh. Run: gh repo set-default <owner/repo>"; exit 1; }

echo "üìÑ Looking for workflow‚Ä¶"
WF_ID=""
# Prefer exact file if present; otherwise try by workflow name.
if gh workflow view "$WF_FILE" >/dev/null 2>&1; then
  TARGET="$WF_FILE"
else
  # Try by name (best-effort)
  if gh workflow view "$WF_NAME" >/dev/null 2>&1; then
    TARGET="$WF_NAME"
  else
    echo "‚ùå Workflow not found. Ensure it exists as $WF_FILE or named \"$WF_NAME\"."
    echo "   Tip: gh workflow list"
    exit 1
  fi
fi
echo "‚úÖ Found workflow: $TARGET"

echo "üß™ Checking required repo variable: GH_BRAKET_ROLE_ARN"
if ! gh variable list | grep -q '^GH_BRAKET_ROLE_ARN'; then
  echo "‚ùå Repo variable GH_BRAKET_ROLE_ARN is missing."
  echo "   Set it with:"
  echo "   gh variable set GH_BRAKET_ROLE_ARN --body arn:aws:iam::<ACCOUNT_ID>:role/<Your-OIDC-Role>"
  exit 1
fi

echo "üöÄ Triggering workflow_dispatch‚Ä¶"
gh workflow run "$TARGET" >/dev/null

echo "‚è≥ Fetching latest run‚Ä¶"
# Grab latest run for this workflow
RUN_JSON="$(gh run list --workflow "$TARGET" --limit 1 --json databaseId,status,conclusion,htmlUrl -q '.[0]')"
[ -n "$RUN_JSON" ] || { echo "‚ùå Could not find a recent run."; exit 1; }
RUN_ID="$(echo "$RUN_JSON" | jq -r '.databaseId')"
RUN_URL="$(echo "$RUN_JSON" | jq -r '.htmlUrl')"
echo "üîó $RUN_URL"
echo "‚ñ∂Ô∏è  Watching logs (press Ctrl+C to stop)‚Ä¶"
gh run watch "$RUN_ID" --exit-status

echo "üìú Final logs:"
gh run view "$RUN_ID" --log
echo "üéâ Done."